# This workflow will install Python dependencies, run tests, and report the coverage with a variety of Python versions and OSs.
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # * is a special character in YAML, so you have to quote this string
    - cron: "0 0 * * *" # every midnight

jobs:
  test:
    name: Test (${{ matrix.os }}, python version ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #        os: [ubuntu-latest, windows-latest]
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"] # list of Python versions to test
        #        exclude:
        #          - os: windows-latest
        #            python-version: "3.9"
        #          - os: windows-latest
        #            python-version: "3.10"
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip
    #          - os: windows-latest
    #            path: ~\AppData\Local\pip\Cache

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python using Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          miniconda-version: latest

      - name: Cache pip dependencies
        id: cache_pip
        uses: actions/cache@v4
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-python${{ matrix.python-version }}-pip-20250302-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-python${{ matrix.python-version }}-pip-20250302-
          # We have used a softer matching strategy for the full hash of setup.py, as recommended by GitHub.
          # See: https://github.com/davronaliyev/Cache-dependencies-in-GitHub-Actions/blob/main/examples.md#python---pip
          # This restores the cache first and then downloads any changed packages to avoid updating the cache with
          # every change to the setup.py file, thus reducing the storage requirements of GitHub Action.
          # We set a date tag to the cache key to show the updated date of the cache. We can update this date tag to
          # generate new cache after every major changes in setup.py.

      - name: Install mmai25_hackathon dependencies
        run: |
          pip install torch==2.6.0 torchvision==0.21.0 torchaudio==2.6.0 --index-url https://download.pytorch.org/whl/cpu
          pip install torch_geometric==2.6.0
          pip install torch_scatter==2.1.2 -f https://data.pyg.org/whl/torch-2.6.0+cpu.html
          pip install torch_sparse==0.6.18 -f https://data.pyg.org/whl/torch-2.6.0+cpu.html
          pip install torch_cluster==1.6.3 -f https://data.pyg.org/whl/torch-2.6.0+cpu.html
          pip install torch_spline_conv==1.2.2 -f https://data.pyg.org/whl/torch-2.6.0+cpu.html
          pip install -e .
        shell: bash -l {0}

      - name: Run tests with thread limits
        id: run_tests
        run: |
          export OMP_NUM_THREADS=1
          export MKL_NUM_THREADS=1
          export NUMEXPR_NUM_THREADS=1
          pytest --cov=mmai25_hackathon
        shell: bash -l {0}

      - name: Determine coverage
        run: |
          coverage xml
        shell: bash -l {0}

      - name: Report coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
